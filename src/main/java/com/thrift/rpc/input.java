/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-18")
public class input implements org.apache.thrift.TBase<input, input._Fields>, java.io.Serializable, Cloneable, Comparable<input> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("input");

  private static final org.apache.thrift.protocol.TField PARAM1_FIELD_DESC = new org.apache.thrift.protocol.TField("param1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARAM2_FIELD_DESC = new org.apache.thrift.protocol.TField("param2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new inputStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new inputTupleSchemeFactory();

  public String param1; // required
  public String param2; // required
  public String action; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARAM1((short)1, "param1"),
    PARAM2((short)2, "param2"),
    ACTION((short)3, "action");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARAM1
          return PARAM1;
        case 2: // PARAM2
          return PARAM2;
        case 3: // ACTION
          return ACTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARAM1, new org.apache.thrift.meta_data.FieldMetaData("param1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAM2, new org.apache.thrift.meta_data.FieldMetaData("param2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(input.class, metaDataMap);
  }

  public input() {
  }

  public input(
    String param1,
    String param2,
    String action)
  {
    this();
    this.param1 = param1;
    this.param2 = param2;
    this.action = action;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public input(input other) {
    if (other.isSetParam1()) {
      this.param1 = other.param1;
    }
    if (other.isSetParam2()) {
      this.param2 = other.param2;
    }
    if (other.isSetAction()) {
      this.action = other.action;
    }
  }

  public input deepCopy() {
    return new input(this);
  }

  @Override
  public void clear() {
    this.param1 = null;
    this.param2 = null;
    this.action = null;
  }

  public String getParam1() {
    return this.param1;
  }

  public input setParam1(String param1) {
    this.param1 = param1;
    return this;
  }

  public void unsetParam1() {
    this.param1 = null;
  }

  /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam1() {
    return this.param1 != null;
  }

  public void setParam1IsSet(boolean value) {
    if (!value) {
      this.param1 = null;
    }
  }

  public String getParam2() {
    return this.param2;
  }

  public input setParam2(String param2) {
    this.param2 = param2;
    return this;
  }

  public void unsetParam2() {
    this.param2 = null;
  }

  /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam2() {
    return this.param2 != null;
  }

  public void setParam2IsSet(boolean value) {
    if (!value) {
      this.param2 = null;
    }
  }

  public String getAction() {
    return this.action;
  }

  public input setAction(String action) {
    this.action = action;
    return this;
  }

  public void unsetAction() {
    this.action = null;
  }

  /** Returns true if field action is set (has been assigned a value) and false otherwise */
  public boolean isSetAction() {
    return this.action != null;
  }

  public void setActionIsSet(boolean value) {
    if (!value) {
      this.action = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARAM1:
      if (value == null) {
        unsetParam1();
      } else {
        setParam1((String)value);
      }
      break;

    case PARAM2:
      if (value == null) {
        unsetParam2();
      } else {
        setParam2((String)value);
      }
      break;

    case ACTION:
      if (value == null) {
        unsetAction();
      } else {
        setAction((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARAM1:
      return getParam1();

    case PARAM2:
      return getParam2();

    case ACTION:
      return getAction();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARAM1:
      return isSetParam1();
    case PARAM2:
      return isSetParam2();
    case ACTION:
      return isSetAction();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof input)
      return this.equals((input)that);
    return false;
  }

  public boolean equals(input that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_param1 = true && this.isSetParam1();
    boolean that_present_param1 = true && that.isSetParam1();
    if (this_present_param1 || that_present_param1) {
      if (!(this_present_param1 && that_present_param1))
        return false;
      if (!this.param1.equals(that.param1))
        return false;
    }

    boolean this_present_param2 = true && this.isSetParam2();
    boolean that_present_param2 = true && that.isSetParam2();
    if (this_present_param2 || that_present_param2) {
      if (!(this_present_param2 && that_present_param2))
        return false;
      if (!this.param2.equals(that.param2))
        return false;
    }

    boolean this_present_action = true && this.isSetAction();
    boolean that_present_action = true && that.isSetAction();
    if (this_present_action || that_present_action) {
      if (!(this_present_action && that_present_action))
        return false;
      if (!this.action.equals(that.action))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParam1()) ? 131071 : 524287);
    if (isSetParam1())
      hashCode = hashCode * 8191 + param1.hashCode();

    hashCode = hashCode * 8191 + ((isSetParam2()) ? 131071 : 524287);
    if (isSetParam2())
      hashCode = hashCode * 8191 + param2.hashCode();

    hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
    if (isSetAction())
      hashCode = hashCode * 8191 + action.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(input other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetParam1()).compareTo(other.isSetParam1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param1, other.param1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParam2()).compareTo(other.isSetParam2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.param2, other.param2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("input(");
    boolean first = true;

    sb.append("param1:");
    if (this.param1 == null) {
      sb.append("null");
    } else {
      sb.append(this.param1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("param2:");
    if (this.param2 == null) {
      sb.append("null");
    } else {
      sb.append(this.param2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("action:");
    if (this.action == null) {
      sb.append("null");
    } else {
      sb.append(this.action);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class inputStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public inputStandardScheme getScheme() {
      return new inputStandardScheme();
    }
  }

  private static class inputStandardScheme extends org.apache.thrift.scheme.StandardScheme<input> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, input struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARAM1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param1 = iprot.readString();
              struct.setParam1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARAM2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.param2 = iprot.readString();
              struct.setParam2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.action = iprot.readString();
              struct.setActionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, input struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.param1 != null) {
        oprot.writeFieldBegin(PARAM1_FIELD_DESC);
        oprot.writeString(struct.param1);
        oprot.writeFieldEnd();
      }
      if (struct.param2 != null) {
        oprot.writeFieldBegin(PARAM2_FIELD_DESC);
        oprot.writeString(struct.param2);
        oprot.writeFieldEnd();
      }
      if (struct.action != null) {
        oprot.writeFieldBegin(ACTION_FIELD_DESC);
        oprot.writeString(struct.action);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class inputTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public inputTupleScheme getScheme() {
      return new inputTupleScheme();
    }
  }

  private static class inputTupleScheme extends org.apache.thrift.scheme.TupleScheme<input> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, input struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetParam1()) {
        optionals.set(0);
      }
      if (struct.isSetParam2()) {
        optionals.set(1);
      }
      if (struct.isSetAction()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetParam1()) {
        oprot.writeString(struct.param1);
      }
      if (struct.isSetParam2()) {
        oprot.writeString(struct.param2);
      }
      if (struct.isSetAction()) {
        oprot.writeString(struct.action);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, input struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.param1 = iprot.readString();
        struct.setParam1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.param2 = iprot.readString();
        struct.setParam2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.action = iprot.readString();
        struct.setActionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

